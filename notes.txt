                            ###FireBase Setup
Go to google firebase .com and got o console and create a new project give the name dashboard.

Name: dashboardDb
unique identifier : dashboarddb-d8a0c

We are going to use authentication & fireStore database(cloud fireStore) in this project.

Before we go ahead write in terminal npm i firebase and then create a component sign_in
and add link/routing for it. 


                              ###Authentication

create a utils folder contain utils.js 

import {initializeApp} from 'firebase/app'; 
//help us to add instance to online firebase console
in the console click on web copy the config;


const firebaseConfig = {
  apiKey: "AIzaSyDzYskhxs56sM6_DJlXJCeAiENWHx0xr2k",
  authDomain: "dashboarddb-d8a0c.firebaseapp.com",
  projectId: "dashboarddb-d8a0c",
  storageBucket: "dashboarddb-d8a0c.appspot.com",
  messagingSenderId: "954542256093",
  appId: "1:954542256093:web:f39b2ebd8b78d3daa3d034",
  measurementId: "G-BTP9H781M9"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
so set up firebase app is done!



                  ####SETUP FIREBASE Authentication

import { initializeApp } from 'firebase/app'; //help us to add instance to online firebase console
import {
    getAuth,
    signInWithRedirect,
    signInWithPopup,
    GoogleAuthProvider
} from 'firebase/auth';

const firebaseConfig = {
    apiKey: "AIzaSyDzYskhxs56sM6_DJlXJCeAiENWHx0xr2k",
    authDomain: "dashboarddb-d8a0c.firebaseapp.com",
    projectId: "dashboarddb-d8a0c",
    storageBucket: "dashboarddb-d8a0c.appspot.com",
    messagingSenderId: "954542256093",
    appId: "1:954542256093:web:f39b2ebd8b78d3daa3d034",
    measurementId: "G-BTP9H781M9"
};

// Initialize Firebase
 const app = initializeApp(firebaseConfig);
const provider = new GoogleAuthProvider();   //creating a variable to use googleauthprovider class


//setting custom parameters
provider.setCustomParameters({
    'prompt': "select_account",
});

export const auth = getAuth();

export const signInWithGooglePopup = ()=> signInWithPopup(auth,provider);

//go to firebase console and go to authentication enable google 




=> Now in signup page:

import React from 'react'
import { signInWithGooglePopup } from '../../utils/Utils';

const SignUp = () => {

    const logGoogleUser = async () => {
        const response = await signInWithGooglePopup();
        console.log(response)
    }

    return (
        <div>
            SIGNUP PAGE
            <button onClick = { logGoogleUser } > Sign Up</button>
        </div>
    )
}

export default SignUp

                      ####SETUP FIRESTORE DATABASE



import {
    getFirestore,  // instance to get firestore
    doc,  // get data base 
    getDoc,  // getting the data from database
    setDoc  // setting the data to firestore
} from 'firebase/firestore';




we have added a firebase Storage facility 

//Setting up fireStore database

// get the firestore db instance into a variable
export const db = getFirestore();


//creating a document in db using auth uid async function and getting data as snapshot
export const createUserDocumentFromAuth = async (userAuth) => {


    const userDocRef = doc(db, 'users', userAuth.uid);
    console.log(userDocRef)
    //snapshort will give user data will give false if empty using exists method
    const userSnapshort = await getDoc(userDocRef);
    console.log(userSnapshort);
    console.log(userSnapshort.exists());


    if (!userSnapshort.exists()) { //if user does not exist create one
        const { displayName, email } = userAuth;
        const createdAt = new Date();


        try {
            await setDoc(userDocRef, {
                displayName,
                email,
                createdAt
            });
        } catch (error) {
            console.log('error creating the user', error.message);
        }
    }
    //if user exist then just return doc
    return userDocRef;


}


                        SIGN IN WITH REDIRECT
                           SIGN UP FORM


//On auth state change

now what we did is that when ever user is logged in we manage elements using context setCurrentUser 
and we updated in each login or sign up page but we do not need to do that in each element we 
can simply make a observer/listener so when ever we login or logout the state will be updated in
the same userContext file;

//creating
export const onAuthStateChangedListener = (callback)=>{onAuthStateChanged(auth, callback)};

//using 
  useEffect(() => {
      const unSubscribe =   onAuthStateChangedListener((user) => {
        console.log(user)
            if (user) {
                createUserDocumentFromAuth(user);
            }
            setCurrentUser(user);
        })

        return unSubscribe;
    }, [])




//HOW TO CREATE A TOGGLE CART AND TOGGLING IT 

First of all create a cartIcon component and import in navbar.
then we need a dropdown create another dropdown component and import in navbar.

now create a toggle context





                  //  Firebase DB No-SQL  //




Step 01: Make shop-data.JSON file to javaScript File
export by default shop_data;

AddCollectionAndDocuments: function has been created in utils .js please check imported in 
product context after sending data to firebase we will again comment our code in product context because 
our data is updated in firestore we just wanted to learn the method to upload data.


//GETTING DATA FROM Firebase:

import query,getDocs








